/******************************************************************************
   Author: Joaquín Béjar García
   Email: jb@taunais.com
   Date: 23/2/25
******************************************************************************/
use crate::curves::{Curve, Point2D};
use crate::error::{CurveError, OperationErrorKind};
use crate::geometrics::{BasicMetrics, MetricsExtractor, RangeMetrics, ShapeMetrics, TrendMetrics};
use num_traits::ToPrimitive;
use rand::rngs::StdRng;
use rand::{Rng, SeedableRng};
use rust_decimal::Decimal;
use statrs::distribution::{ContinuousCDF, Normal};
use std::collections::BTreeSet;

/// A trait that defines the behavior of any object that can produce a curve representation.
///
/// Types implementing the `Curvable` trait must provide the `curve` method, which generates
/// a `Curve` object based on the internal state of the implementer. This method returns
/// a `Result`, allowing for proper error handling in situations where the curve
/// cannot be generated due to various issues (e.g., invalid data or computation errors).
///
/// # Method
///
/// - `curve`
///   - **Returns**:
///     - A `Result` containing:
///       - `Curve`: On success, a valid representation of the curve.
///       - `CurveError`: On failure, detailed information about why the curve could not be generated.
///
/// # Error Handling
///
/// Given the reliance on precise data and operations, the `Curvable` trait integrates
/// tightly with the `CurveError` type to handle potential issues, such as:
/// - Invalid points or coordinates (`Point2DError`)
/// - Issues in curve construction (`ConstructionError`)
/// - Errors during interpolation (`InterpolationError`)
/// - General computation or operational failures (`OperationError`, `StdError`)
///
/// # Example Usage
///
/// This trait forms the basis for creating highly customizable and precise curve objects,
/// ensuring compatibility with mathematical, computational, or graphical operations.
///
/// Implementing this trait allows an object to seamlessly interact with the higher-level
/// functionalities in the `curves` module, such as visualization, analysis, and transformation.
///
/// # See Also
/// - [`Curve`]: Represents the mathematical curve generated by this trait.
/// - [`CurveError`]: Error type encapsulating issues encountered during curve generation.
pub trait Curvable {
    /// Generates a `Curve` representation of the implementer.
    ///
    /// The `curve` method is the core functionality of this trait. It is expected
    /// to compute and return a `Curve` object that accurately describes the
    /// implementer's structure or state in the context of a two-dimensional curve.
    ///
    /// # Returns
    ///
    /// - `Ok(Curve)`: When the curve is successfully generated.
    /// - `Err(CurveError)`: If curve generation fails for any reason.
    ///
    /// # Errors
    ///
    /// The method may return a `CurveError` in scenarios such as:
    /// - **Point2DError**: If an invalid or missing 2D point is encountered.
    /// - **ConstructionError**: When the curve cannot be initialized due to invalid input.
    /// - **InterpolationError**: If there are issues during interpolation of the curve's points.
    /// - **AnalysisError**: In cases where analytical operations on the curve fail.
    ///
    /// This ensures robust error handling for downstream processes and applications.
    fn curve(&self) -> Result<Curve, CurveError>;
}

/// A trait for generating statistical curves based on metrics
///
/// This trait provides methods to generate curves that match specified
/// statistical properties. It extends the `MetricsExtractor` trait to
/// ensure implementing types can both extract and generate metrics.
pub trait StatisticalCurve: MetricsExtractor {
    /// Retrieves the x-axis values for the statistical curve.
    ///
    /// This method returns a vector of `Decimal` values representing the x-coordinates
    /// of the points that define the curve. These x-values are essential for plotting
    /// the curve and performing various statistical analyses.
    ///
    /// # Returns
    ///
    /// A `Vec<Decimal>` containing the x-values of the statistical curve. Each `Decimal`
    /// represents a point on the x-axis.
    fn get_x_values(&self) -> Vec<Decimal>;

    /// Generates a statistical curve with properties that match the provided metrics.
    ///
    /// # Overview
    /// This function creates a curve with statistical properties that approximate the
    /// specified metrics. It uses a combination of normal distribution sampling and
    /// transformations to achieve the desired statistical characteristics.
    ///
    /// # Parameters
    /// - `basic_metrics`: Basic statistical properties like mean, median, mode, and standard deviation.
    /// - `shape_metrics`: Shape-related metrics like skewness and kurtosis.
    /// - `range_metrics`: Range information including min, max, and quartile data.
    /// - `trend_metrics`: Trend information including slope and intercept for linear trend.
    /// - `num_points`: Number of points to generate in the curve.
    /// - `seed`: Optional random seed for reproducible curve generation.
    ///
    /// # Returns
    /// - `Result<Curve, CurveError>`: A curve matching the specified statistical properties,
    ///   or an error if generation fails.
    ///
    fn generate_statistical_curve(
        &self,
        basic_metrics: &BasicMetrics,
        shape_metrics: &ShapeMetrics,
        range_metrics: &RangeMetrics,
        trend_metrics: &TrendMetrics,
        num_points: usize,
        seed: Option<u64>,
    ) -> Result<Curve, CurveError> {
        if num_points < 2 {
            return Err(CurveError::OperationError(
                OperationErrorKind::InvalidParameters {
                    operation: "generate_statistical_curve".to_string(),
                    reason: "Number of points must be at least 2".to_string(),
                },
            ));
        }

        // Initialize random number generator with optional seed
        let seed_value = seed.unwrap_or_else(rand::random);
        let mut rng = StdRng::seed_from_u64(seed_value);

        // Create a normal distribution with the given mean and standard deviation
        let normal = Normal::new(
            basic_metrics.mean.to_f64().unwrap_or(0.0),
            basic_metrics.std_dev.to_f64().unwrap_or(1.0),
        )
        .map_err(|e| CurveError::MetricsError(e.to_string()))?;

        // Generate initial y-values from the normal distribution
        let mut y_values: Vec<f64> = (0..num_points)
            .map(|_| {
                let u: f64 = rng.gen_range(0.0..1.0); // Generate a value between 0 and 1
                normal.inverse_cdf(u) // Convert to normal distribution using inverse CDF
            })
            .collect();

        // Apply transformations to match skewness and kurtosis (simplified approach)
        let skewness = shape_metrics.skewness.to_f64().unwrap_or(0.0);
        let kurtosis = shape_metrics.kurtosis.to_f64().unwrap_or(0.0);

        // Apply skewness transformation (simplified approach)
        if skewness.abs() > 0.01 {
            for y in &mut y_values {
                // Apply a simple transformation to induce skewness
                *y += skewness * (*y - basic_metrics.mean.to_f64().unwrap_or(0.0)).powi(2);
            }
        }

        // Apply kurtosis transformation (simplified approach)
        if kurtosis.abs() > 0.01 {
            for y in &mut y_values {
                // Apply a simple transformation to adjust kurtosis
                let z = (*y - basic_metrics.mean.to_f64().unwrap_or(0.0))
                    / basic_metrics.std_dev.to_f64().unwrap_or(1.0);
                *y += kurtosis * 0.1 * z.powi(3);
            }
        }

        let x_values: Vec<Decimal> = self.get_x_values();

        // Apply trend (slope and intercept)
        let slope = trend_metrics.slope.to_f64().unwrap_or(0.0);
        if slope.abs() > 0.001 {
            let intercept = trend_metrics.intercept.to_f64().unwrap_or(0.0);
            for i in 0..y_values.len() {
                y_values[i] += slope * x_values[i].to_f64().unwrap() + intercept;
            }
        }

        // Scale y-values to match the range
        let current_min = y_values.iter().cloned().fold(f64::INFINITY, f64::min);
        let current_max = y_values.iter().cloned().fold(f64::NEG_INFINITY, f64::max);
        let current_range = current_max - current_min;

        let target_min = range_metrics.min.y.to_f64().unwrap_or(0.0);
        let target_max = range_metrics.max.y.to_f64().unwrap_or(1.0);
        let target_range = target_max - target_min;

        // Scale and shift the y-values to match the target range
        if current_range > 0.0 {
            for y in &mut y_values {
                *y = ((*y - current_min) / current_range) * target_range + target_min;
            }
        }

        // Ensure mode value is included
        if num_points > 3 {
            let index = rng.gen_range(0..(num_points / 3));
            y_values[index] = basic_metrics.mode.to_f64().unwrap_or(y_values[index]);
        }

        // Create points and construct curve
        let mut points = BTreeSet::new();
        for i in 0..num_points {
            let point = Point2D::from_f64_tuple(x_values[i].to_f64().unwrap(), y_values[i])?;
            points.insert(point);
        }

        // Create the curve
        Ok(Curve::new(points))
    }

    /// Generates a refined statistical curve that iteratively adjusts to better match
    /// the target metrics.
    ///
    /// This method extends the basic curve generation by performing multiple attempts
    /// with adjusted parameters until the resulting curve metrics are within the specified
    /// tolerance of the target metrics.
    ///
    /// # Parameters
    /// - `basic_metrics`: Target basic statistical metrics
    /// - `shape_metrics`: Target shape metrics
    /// - `range_metrics`: Target range metrics
    /// - `trend_metrics`: Target trend metrics
    /// - `num_points`: Number of points to generate
    /// - `max_attempts`: Maximum number of generation attempts (default: 5)
    /// - `tolerance`: Acceptable difference between target and actual metrics (default: 0.1)
    /// - `seed`: Optional random seed for reproducibility
    ///
    /// # Returns
    /// - `Result<Curve, CurveError>`: The generated curve or an error
    #[allow(clippy::too_many_arguments)]
    fn generate_refined_statistical_curve(
        &self,
        basic_metrics: &BasicMetrics,
        shape_metrics: &ShapeMetrics,
        range_metrics: &RangeMetrics,
        trend_metrics: &TrendMetrics,
        num_points: usize,
        max_attempts: usize,
        tolerance: Decimal,
        seed: Option<u64>,
    ) -> Result<Curve, CurveError> {
        let max_tries = if max_attempts == 0 { 5 } else { max_attempts };
        let mut seed_value = seed.unwrap_or_else(rand::random);

        for _ in 0..max_tries {
            let curve = self.generate_statistical_curve(
                basic_metrics,
                shape_metrics,
                range_metrics,
                trend_metrics,
                num_points,
                Some(seed_value),
            )?;

            if self.verify_curve_metrics(&curve, basic_metrics, tolerance)? {
                return Ok(curve);
            }

            // Try a different seed for the next attempt
            seed_value = seed_value.wrapping_add(1);
        }

        // Return the last generated curve even if it doesn't perfectly match
        self.generate_statistical_curve(
            basic_metrics,
            shape_metrics,
            range_metrics,
            trend_metrics,
            num_points,
            Some(seed_value),
        )
    }

    /// Verifies if the metrics of the generated curve match the target metrics
    /// within the specified tolerance.
    ///
    /// # Parameters
    /// - `curve`: The curve to verify
    /// - `target_metrics`: The target basic metrics to compare against
    /// - `tolerance`: Maximum acceptable difference between actual and target metrics
    ///
    /// # Returns
    /// - `Result<bool, CurveError>`: True if metrics match within tolerance, false otherwise
    fn verify_curve_metrics(
        &self,
        curve: &Curve,
        target_metrics: &BasicMetrics,
        tolerance: Decimal,
    ) -> Result<bool, CurveError> {
        let actual_metrics = curve
            .compute_basic_metrics()
            .map_err(|e| CurveError::MetricsError(format!("Failed to compute metrics: {}", e)))?;

        // Check if the key metrics are within tolerance
        let mean_diff = (actual_metrics.mean - target_metrics.mean).abs();
        let std_dev_diff = (actual_metrics.std_dev - target_metrics.std_dev).abs();

        Ok(mean_diff <= tolerance && std_dev_diff <= tolerance)
    }
}
